package com.example.farmacia.controller;

import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.example.farmacia.model.Categoria;

@RestController
@RequestMapping("/categoria")
public class CategoriaController {
	
	@Autowired
	private PostagemRepository repository;
	
	
	@GetMapping
	public ResponseEntity<List<Categoria>> resposta(){
		return ResponseEntity.ok(repository.findAll());
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Categoria> getById(@PathVariable Long id ){
		return repository.findById(id)
				.map(resposta -> ResponseEntity.ok(resposta))
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());

	}

	@GetMapping("/descricao/{descricao}")
	public ResponseEntity<List<Categoria>> getByDescricao(@PathVariable String descricao){
		return ResponseEntity.ok(repository.findAllByTituloContainingIgnoreCase(descricao));
	}
	
	@PostMapping
	public ResponseEntity<Categoria> inserirCategoria(@Valid @RequestBody Categoria categoria){
		if(repository.existsById(categoria.getTema().getId()))
			return ResponseEntity.status(HttpStatus.CREATED)
				.body(repository.save(categoria));
				
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
	}
	
	@PutMapping
	public ResponseEntity<Categoria> atualizarPostagem(@RequestBody Categoria categoriam){
		return repository.findById(categoria.getId())
				.map(resposta -> ResponseEntity.status(HttpStatus.OK)
				.body(repository.save(postagem)))
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
	}

	
	/*@PutMapping
	public ResponseEntity<Categoria> atualizarCategoria(@Valid @RequestBody Categoria categoria){
		if(repository.existsById(categoria.getTema().getId())) {
			if (repository.existsById(categoria.getTema().getId()))
				return ResponseEntity.status(HttpStatus.OK)
						.body(repository.save(categoria));	
		
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();		
		}
		
		return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	}*/
	
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable Long id) {
		Optional<Categoria> categoria = repository.findById(id);
		
		if(categoria.isEmpty())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		
		repository.deleteById(id);				
	}

	
	/*@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable Long id) {
		Optional<Categoria> categoria = repository.findById(id);
				
				if(postagem.isEmpty())
					throw new ResponseStatusException(HttpStatus.NOT_FOUND);
				
				repository.deleteById(id);
	}*/

}
